static   PrintWriter p = new PrintWriter(System.out);
    public static void main(String args[]) throws IOException {
        Reader ob = new Reader();
        int t= ob.nextInt();
        while(t-->0){
            int n= ob.nextInt();int C = ob.nextInt();
            LazySegmentTree seg = new LazySegmentTree(n);
            while(C-->0){
                int action = ob.nextInt();
                if(action==0){
                    int i= ob.nextInt()-1;
                    int j =ob.nextInt()-1;
                    long sum = ob.nextLong();
                    seg.update(1, 0, n-1, i, j, sum);
                  //  p.println(seg.seg[1]);
                }else{
                    int i= ob.nextInt()-1;
                    int j= ob.nextInt()-1;
                    long val = seg.rmq(1, 0, n-1, i,j);
                    p.println(val);
                }
            }
        }
        p.println("Lets GO ");
        p.close();
    }
    static class LazySegmentTree{
        long [] seg;
        long[] lazy;
        int getMid(long L,long R){ return(int) (L+(R-L)/2);}
        LazySegmentTree(int n){
            seg = new long [4*n];
            lazy= new long[4*n];
        }
        void push(int v,int L,int R){
            if(lazy[v]!=0){
                seg[v]+=(R-L+1)*lazy[v];
                if(L!=R){
                    lazy[v<<1]+=lazy[v];
                    lazy[(v<<1)+1]+=lazy[v];
                }
                lazy[v] =0;
            }
        }
        void update(int cur,int L,int R,int i,int j,long added){
            push(cur,L,R);
            if(i>R||j<L) return;
            if(L>=i&&R<=j){
             seg[cur]+=((R-L+1)*added);
             if(R!=L){
                 lazy[cur<<1]+=added;
                 lazy[(cur<<1)+1]+=added;
             }
            }else{
                int mid = getMid(L, R);
                update(cur<<1, L, mid, i, j, added);
                update((cur<<1)+1, mid+1, R, i, j, added);
                seg[cur] = seg[cur<<1]+seg[(cur<<1)+1];
            }
        }
        long rmq(int cur,int L,int R,int  i,int j){
            push(cur,L,R);
            if(i>R||j<L) return 0;
            if(L>=i&&R<=j) return seg[cur];
            //copute the min possble of hte left snad right subtre
            long pleft = rmq(cur<<1,L,getMid(L, R),i,j);
            long pright = rmq((cur<<1)+1, getMid(L, R)+1, R, i, j);
            return pleft+pright;
    }
}
}
